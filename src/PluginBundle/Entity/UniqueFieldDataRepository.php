<?php

namespace PluginBundle\Entity;
use AppBundle\Entity\Enrollment;
use Doctrine\ORM\EntityRepository;

/**
 * UniqueFieldDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UniqueFieldDataRepository extends EntityRepository
{
    private function extractUniqueData(Enrollment $enrollment, array $uniqueFields)
    {
        $data = $enrollment->getFlattenedData();
        return array_filter($data, function($key) use($uniqueFields) {
            return in_array($key, $uniqueFields);
        }, ARRAY_FILTER_USE_KEY);
    }

    public function checkUniqueData(Enrollment $enrollment, array $uniqueFields)
    {
        $queryBuilder = $this->createQueryBuilder('fd')
            ->select('fd.fieldName')
            ->where('fd.form = :form')
            ->setParameter('form', $enrollment->getForm());
        if($enrollment->getId())
            $queryBuilder
                ->andWhere('fd.enrollment != :enrollment')
                ->setParameter('enrollment', $enrollment);
        $orX = $queryBuilder->expr()->orX();
        $i=0;
        foreach($this->extractUniqueData($enrollment, $uniqueFields) as $fieldName => $fieldData) {
            $orX->add('fd.fieldName = :fieldName'.$i.' AND fd.data = :fieldData'.$i);
            $queryBuilder->setParameter('fieldName'.$i, $fieldName)
                ->setParameter('fieldData'.$i, serialize($fieldData));
            $i++;
        }
        return array_unique(array_map(function($v) {
            return $v['fieldName'];
        }, $queryBuilder->andWhere($orX)
            ->getQuery()
            ->getScalarResult()
        ));
    }

    public function addUniqueData(Enrollment $enrollment, array $uniqueFields)
    {
        foreach($this->extractUniqueData($enrollment, $uniqueFields) as $fieldName => $fieldData) {
            $entity = new UniqueFieldData();
            $entity->setEnrollment($enrollment);
            $entity->setFieldName($fieldName);
            $entity->setData($fieldData);
            $this->_em->persist($entity);
        }
    }

    public function setUniqueData(Enrollment $enrollment, array $uniqueFields)
    {
        $entities = $this->findBy([
            'enrollment' => $enrollment,
        ]);
        /* @var $entities UniqueFieldData[] */
        $mappedEntities = [];
        foreach($entities as $entity)
            $mappedEntities[$entity->getFieldName()] = $entity;

        $unprocessedFields = [];
        foreach($this->extractUniqueData($enrollment, $uniqueFields) as $fieldName => $fieldData) {
            if(isset($mappedEntities[$fieldName])) {
                $mappedEntities[$fieldName]->setData($fieldData);
            } else {
                $unprocessedFields[] = $fieldName;
            }
        }
        $this->addUniqueData($enrollment, $unprocessedFields);
    }

    public function removeUniqueData(Enrollment $enrollment)
    {
        $entities = $this->findBy([
            'enrollment' => $enrollment,
        ]);
        foreach($entities as $entity)
            $this->_em->remove($entity);
    }
}
